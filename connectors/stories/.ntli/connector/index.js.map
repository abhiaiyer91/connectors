{"version":3,"sources":["../../src/index.ts"],"sourcesContent":["// Documentation: https://sdk.netlify.com\nimport { NetlifyIntegration } from \"@netlify/sdk\";\nimport csv from \"csvtojson\";\nimport { google } from \"googleapis\";\n\nconst integration = new NetlifyIntegration();\nconst connector = integration.addConnector({\n  typePrefix: \"Holiday\",\n  localDevOptions: {\n    apiKey: process.env.GOOGLE_DRIVE_API_KEY!,\n    fileId: process.env.GOOGLE_DRIVE_FILE_ID!,\n  },\n});\n\nconnector.defineOptions(({ zod }) => {\n  return zod.object({\n    apiKey: zod.string().meta({\n      label: \"Google Drive API Key\",\n      helpText: \"The API Key used for Google Drive\",\n      secret: true, // set this to true for API tokens and other secret values\n    }),\n    fileId: zod.string().meta({\n      label: \"Google Drive File ID\",\n      helpText: \"The File ID for Google Drive\",\n    }),\n  });\n});\n\nconnector.init(async ({ options }) => {\n  const drive = google.drive({\n    version: \"v3\",\n    auth: options.apiKey as string,\n  });\n\n  return {\n    drive,\n  };\n});\n\nconnector.model(async ({ define }) => {\n  define.nodeModel({\n    name: \"Story\",\n    fields: {\n      title: {\n        type: \"String\",\n        required: true,\n      },\n      body: {\n        type: \"String\",\n        required: true,\n      },\n      image: {\n        type: \"String\",\n        required: true,\n      },\n    },\n  });\n});\n\nconnector.sync(async ({ models, state, options }) => {\n  try {\n    const file = await state.drive.files.get({\n      fileId: options.fileId,\n      alt: \"media\",\n    });\n\n    const stories = await csv().fromString(file.data as any);\n\n    stories.forEach(({ title, body }, index) => {\n      models.Story.create({\n        id: `${title}_${body}`,\n        title,\n        body,\n        image: `https://storage.googleapis.com/jamhack-2023-vector-search-assets/image${index}.png`,\n      });\n    });\n  } catch (err) {\n    console.error(err);\n  }\n});\n\nintegration.onEnable(async (_, { teamId, client }) => {\n  // Connectors are disabled by default, so we need to\n  // enable them when the integration is enabled.\n\n  teamId && (await client.enableConnectors(teamId));\n\n  return {\n    statusCode: 200,\n  };\n});\n\nexport { integration };\n"],"mappings":";AACA,SAAS,0BAA0B;AACnC,OAAO,SAAS;AAChB,SAAS,cAAc;AAEvB,IAAM,cAAc,IAAI,mBAAmB;AAC3C,IAAM,YAAY,YAAY,aAAa;AAAA,EACzC,YAAY;AAAA,EACZ,iBAAiB;AAAA,IACf,QAAQ,QAAQ,IAAI;AAAA,IACpB,QAAQ,QAAQ,IAAI;AAAA,EACtB;AACF,CAAC;AAED,UAAU,cAAc,CAAC,EAAE,IAAI,MAAM;AACnC,SAAO,IAAI,OAAO;AAAA,IAChB,QAAQ,IAAI,OAAO,EAAE,KAAK;AAAA,MACxB,OAAO;AAAA,MACP,UAAU;AAAA,MACV,QAAQ;AAAA;AAAA,IACV,CAAC;AAAA,IACD,QAAQ,IAAI,OAAO,EAAE,KAAK;AAAA,MACxB,OAAO;AAAA,MACP,UAAU;AAAA,IACZ,CAAC;AAAA,EACH,CAAC;AACH,CAAC;AAED,UAAU,KAAK,OAAO,EAAE,QAAQ,MAAM;AACpC,QAAM,QAAQ,OAAO,MAAM;AAAA,IACzB,SAAS;AAAA,IACT,MAAM,QAAQ;AAAA,EAChB,CAAC;AAED,SAAO;AAAA,IACL;AAAA,EACF;AACF,CAAC;AAED,UAAU,MAAM,OAAO,EAAE,OAAO,MAAM;AACpC,SAAO,UAAU;AAAA,IACf,MAAM;AAAA,IACN,QAAQ;AAAA,MACN,OAAO;AAAA,QACL,MAAM;AAAA,QACN,UAAU;AAAA,MACZ;AAAA,MACA,MAAM;AAAA,QACJ,MAAM;AAAA,QACN,UAAU;AAAA,MACZ;AAAA,MACA,OAAO;AAAA,QACL,MAAM;AAAA,QACN,UAAU;AAAA,MACZ;AAAA,IACF;AAAA,EACF,CAAC;AACH,CAAC;AAED,UAAU,KAAK,OAAO,EAAE,QAAQ,OAAO,QAAQ,MAAM;AACnD,MAAI;AACF,UAAM,OAAO,MAAM,MAAM,MAAM,MAAM,IAAI;AAAA,MACvC,QAAQ,QAAQ;AAAA,MAChB,KAAK;AAAA,IACP,CAAC;AAED,UAAM,UAAU,MAAM,IAAI,EAAE,WAAW,KAAK,IAAW;AAEvD,YAAQ,QAAQ,CAAC,EAAE,OAAO,KAAK,GAAG,UAAU;AAC1C,aAAO,MAAM,OAAO;AAAA,QAClB,IAAI,GAAG,KAAK,IAAI,IAAI;AAAA,QACpB;AAAA,QACA;AAAA,QACA,OAAO,yEAAyE,KAAK;AAAA,MACvF,CAAC;AAAA,IACH,CAAC;AAAA,EACH,SAAS,KAAK;AACZ,YAAQ,MAAM,GAAG;AAAA,EACnB;AACF,CAAC;AAED,YAAY,SAAS,OAAO,GAAG,EAAE,QAAQ,OAAO,MAAM;AAIpD,YAAW,MAAM,OAAO,iBAAiB,MAAM;AAE/C,SAAO;AAAA,IACL,YAAY;AAAA,EACd;AACF,CAAC;","names":[]}
